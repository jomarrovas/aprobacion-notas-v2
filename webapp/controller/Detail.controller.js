sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/MessageBox", 
    "sap/ui/core/BusyIndicator",
    "sap/f/library",
    "sap/ui/core/ValueState",
    "zalcsa/aprobacionnotas/service/Solicitud"
],
    /**
     * @param {typeof sap.ui.core.mvc.Controller} Controller
     */
    function (Controller, JSONModel, Filter, FilterOperator, MessageBox, BusyIndicator, library, ValueState, servSol) {
        "use strict";
        let CController;
        let goThat;
        let gbCompact;
        let goMessagePopover = new sap.m.MessagePopover();
        let goSetInterval;

        CController = Controller.extend("zalcsa.aprobacionnotas.controller.Detail", {
      /**
       * Called when a controller is instantiated and its View controls (if available) are already created.
       * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
       * @memberOf zalcsa.aprobacionnotas.view.Detail
       */
            onInit: function () {
                //This code was generated by the layout editor.
                goThat = this;
                this.i18n = this.getOwnerComponent().getModel("i18n").getResourceBundle();
                this.oRouter = this.getOwnerComponent().getRouter();
                this.oRouter.getRoute("detail").attachPatternMatched(this.onBeforeRouteMatched, this);
                this.getView().setModel(new JSONModel({}), "Head");

                //this.init();
                //servSol.init(this.oServiceModel);
            },

            /**
             * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
             * (NOT before the first rendering! onInit() is used for that one!).
             * @memberOf zalcsa.aprobacionnotas.view.Detail
             */
            //  onBeforeRendering: function() {
            //
            //  },
            /**
             * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
             * This hook is the same one that SAPUI5 controls get after being rendered.
             * @memberOf zalcsa.aprobacionnotas.view.Detail
             */
            //  onAfterRendering: function () {
            //    var Controller = this;
            //    this.localModel = this.getView().getModel("localModel");
            //    this.localModelSrv = this.getView().getModel("mainModel");
            //  },

            //  refreshMached: async function (e) {
            //    var d = await servSol.obtenerFlujo("LIB1");
            //    this.localModel.setProperty("/flujoCollection", d);
            //  },

            /**
             * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
             * @memberOf zalcsa.aprobacionnotas.view.Detail
             */
            //  onExit: function() {
            //
            //  }

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent onBeforeRouteMatched
             */
            onBeforeRouteMatched: async function (oEvent) {
                //This code was generated by the layout editor.
                this.getView().byId("idPage").setVisible(true);
                this.getView().byId("idPageLayout").setVisible(false);
                let mArguments = oEvent.getParameter("arguments");
                let oSelCobranza = this.getOwnerComponent().getSelCobranza();
                if (!mArguments.Layout || !oSelCobranza) {
                    return;
                }
                this.getView().byId("idPage").setVisible(false);
                this.getView().byId("idPageLayout").setVisible(true);
                gbCompact = !!this.getView().$().closest(".sapUiSizeCompact").length;
                goMessagePopover.removeAllItems();
                this.getView().byId("idButton1").setVisible(false);
                let aFilters = [];
                let oTable = this.getView().byId("idTable2");
                // let oRows = oTable.getBinding("rows");
                let oRows = oTable.getBinding("items");
                let oTitle = this.getView().byId("idTitle2");
                this.localModel = this.getView().getModel("localModel");
                this.localModel.setProperty("/visibleToolbarFullScreen",true);
                this.getView().setModel(new JSONModel(oSelCobranza), "Head");
                if (mArguments.Documento && mArguments.Sociedad) {
                    aFilters.push(new Filter("Sociedad", FilterOperator.EQ, mArguments.Sociedad));
                    aFilters.push(new Filter("Documento", FilterOperator.EQ, mArguments.Documento));
                }
                let fnAfterBinding = function (oEvent1) {
                    let iResults = oEvent1.getSource().getLength();
                    if (iResults <= 0) {
                        oTitle.setText(goThat.i18n.getText("lblDetalleCobranza") + " (0)");
                    } else {
                        oTitle.setText(goThat.i18n.getText("lblDetalleCobranza") + " (" + iResults + ")");
                    }
                };
                oRows.attachChange(fnAfterBinding);
                oRows.filter(aFilters);

                // ValidaciÃ³n de carga de flujo
            
                this.oServiceModel = this.getOwnerComponent().getModel("mainModel");
                servSol.init(this.oServiceModel);

                var solicitudPaso = await servSol.obtenerPaso(mArguments.Documento);
                //this.localModel.setProperty("/detalle", solicitudPaso);
                //var r = this.localModel.getProperty("/detalle");

                this.localModel.setProperty("/detalle/Paso", solicitudPaso[0].paso);

                var esquemaLiberacion = await servSol.obtenerFlujo(solicitudPaso[0].lib_codigo);
                this.localModel.setProperty("/flujoCollection", esquemaLiberacion);
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent handleFullScreen
             */
            handleFullScreen: function (oEvent) {
                //This code was generated by the layout editor.
                this.localModel.setProperty("/visibleToolbarFullScreen",false);
                let oFlexibleColumnLayout = this.getView().getParent().getParent();
                oFlexibleColumnLayout.setLayout(library.LayoutType.MidColumnFullScreen);
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent handleExitFullScreen
             */
            handleExitFullScreen: function (oEvent) {
                //This code was generated by the layout editor.
                this.localModel.setProperty("/visibleToolbarFullScreen",true);
                let oFlexibleColumnLayout = this.getView().getParent().getParent();
                oFlexibleColumnLayout.setLayout(library.LayoutType.TwoColumnsMidExpanded);
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent onValueHelpRequest
             */
            onValueHelpRequest: function (oEvent) {
                //This code was generated by the layout editor.
                let sInputValue = oEvent.getSource().getValue();
                if (!this._ofrgHelp) {
          this._ofrgHelp = sap.ui.xmlfragment(
            "idFragment2",
            "zalcsa.aprobacionnotas" + ".view.dialog.valueHelp",
            this
          );
          this.getView().addDependent(this._ofrgHelp);
        }
                let oBinding = this._ofrgHelp.getBinding("items");
                let oSearchField = this._ofrgHelp._searchField;
        this._ofrgHelp.open();
                if (oBinding) {
                    let oFilter = new Filter("zterm", FilterOperator.Contains, sInputValue);
                    oBinding.filter([oFilter]);
                }
                if (oSearchField) {
                    oSearchField.setValue(sInputValue);
                }
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent onValueHelpClose
             */
            onValueHelpClose: function (oEvent) {
                //This code was generated by the layout editor.
                let oSelectedItem = oEvent.getParameter("selectedItem");
                let oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter([]);
                if (!oSelectedItem) {
                    return;
                }
                let oInput = this.getView().byId("idInput1");
                oInput.setValue(oSelectedItem.getTitle());
                oInput.setValueState(sap.ui.core.ValueState.None);
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent onValueHelpSearch
             */
            onValueHelpSearch: function (oEvent) {
                //This code was generated by the layout editor.
                let sValue = oEvent.getParameter("value");
                let oFilter = new Filter("zterm", FilterOperator.Contains, sValue);
                let oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter([oFilter]);
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent onChange
             */
            onChange: function (oEvent) {
                //This code was generated by the layout editor.
                let oInput = this.getView().byId("idInput1");
                oInput.setValueState(sap.ui.core.ValueState.None);
                let oSuggestionItems = oInput.getSuggestionItems();
                let bError = true;
                for (let i = 0; i < oSuggestionItems.length; i++) {
                    let oItem = oSuggestionItems[i];
                    if (oInput.getValue() === oItem.getText()) {
                        bError = false;
                        break;
                    }
                }
                if (bError) {
                    oInput.setValueState(sap.ui.core.ValueState.Error);
                    return;
                } else {
                    oInput.setValueState(sap.ui.core.ValueState.None);
                }
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent onAccept
             */
            onAccept: function (oEvent) {
                var oThat = this;
                MessageBox["confirm"](this.i18n.getText("confirmMessage"), {
                    actions: [MessageBox.Action.YES,
                        MessageBox.Action.NO
                    ],
                    onClose: function (oAction) {
                        if(oAction === "YES"){
                        //This code was generated by the layout editor.
                        let oSelCobranza = this.getOwnerComponent().getSelCobranza();
                        let oTable = this.getView().byId("idTable2");
                        let oDetCobranza = oTable.getItems()[0].getBindingContext().getObject();
                        let mAprove = {
                            Documento: oSelCobranza.Documento,
                            Sociedad: oSelCobranza.Sociedad,
                            ValorNeto: oSelCobranza.ValorNeto,
                            FacturaReferencia: oSelCobranza.FacturaReferencia,
                            CodigoCliente: oSelCobranza.CodigoCliente,
                            CreadoPor: oSelCobranza.CreadoPor,
                            Estado: oSelCobranza.Estado,
                            Motivo: oSelCobranza.Motivo,
                            Moneda: oSelCobranza.Moneda,
                            UsuarioModifica: oSelCobranza.UsuarioModifica,                            
                            Aprobar: true
                        };
                        this._onAproveReject(mAprove);
                        }
                    }.bind(this)
                });
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent onReject
             */
            onReject: function (oEvent) {
                var oThat = this;
                MessageBox.confirm(this.i18n.getText("confirmMessage"), {
                    actions: [MessageBox.Action.YES,
                        MessageBox.Action.NO
                    ],
                    onClose: function (oAction) {
                        if (oAction === "YES") {
                        //This code was generated by the layout editor.
                            let oSelCobranza = oThat.getOwnerComponent().getSelCobranza();
                            let oTable = oThat.getView().byId("idTable2");
                            let oDetCobranza = oTable.getItems()[0].getBindingContext().getObject();
                            let mAprove = {
                                Documento: oSelCobranza.Documento,
                                Sociedad: oSelCobranza.Sociedad,
                                ValorNeto: oSelCobranza.ValorNeto,
                                FacturaReferencia: oSelCobranza.FacturaReferencia,
                                CodigoCliente: oSelCobranza.CodigoCliente,
                                CreadoPor: oSelCobranza.CreadoPor,
                                Estado: oSelCobranza.Estado,
                                Motivo: oSelCobranza.Motivo,
                                Moneda: oSelCobranza.Moneda,
                                UsuarioModifica: oSelCobranza.UsuarioModifica,                            
                                Aprobar: false
                            };
                            oThat._onAproveReject(mAprove);
                        }
                    }.bind(this)
                });
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} mAprove _onAproveReject
             */
            _onAproveReject: function (mAprove) {
                //This code was generated by the layout editor.
                BusyIndicator.show(0);

                var iCont = 0;
        var oSetInterval;
        let fnSetInterval = function () {
          iCont++;
          if (iCont >= 10) {
            BusyIndicator.hide();
            clearInterval(oSetInterval);
            MessageBox.error(goThat.i18n.getText("merrNoServer"));
          }
        };
        oSetInterval = setInterval(fnSetInterval, 1000);

                goMessagePopover.removeAllItems();
                let oButton = goThat.getView().byId("idButton1");
                oButton.setVisible(false);
                let oModel = this.getOwnerComponent().getModel();
                let fnAfterBinding = function (oEvent) {
                    let oItems = goThat._oTable1.getItems();
                    for (let i = 0; i < oItems.length; i++) {
                        let oLinea = oItems[i].getBindingContext().getObject();
                        if (oLinea.Documento === mAprove.Documento) {
                            goThat.getOwnerComponent().setSelCobranza(oLinea);
                            goThat.getView().getModel("Head").setData(oLinea);
                            break;
                        }
                    }
                    goThat.oRouter.navTo("master", {
                        Layout: library.LayoutType.TwoColumnsMidExpanded
                    });
                };
                let fnsetoData = function (oData, response) {
                    BusyIndicator.hide();
                    clearInterval(oSetInterval);

                    goThat.getView().byId("idPage").setVisible(true);
                    goThat.getView().byId("idPageLayout").setVisible(false);

                    if (response) {
                        if (response.headers["sap-message"]) {
                            let oMessage = JSON.parse(response.headers["sap-message"]);
                            let sSeverity = goThat._convertResponseSeverity(oMessage.severity);
                            let bFound = false;
                            let sDetails = "<p><strong>" + goThat.i18n.getText("meDetailMessage") + "</strong></p>";
                            sDetails += "<ul>";
                            for (let i = 0; i < oMessage.details.length; i++) {
                                let oMessageItem = oMessage.details[i];
                                if (oMessage.code === oMessageItem.code
                                    && oMessage.message === oMessageItem.message
                                    && oMessage.severity === oMessageItem.severity) {

                                    bFound = true;
                                }
                                sDetails += "<li>" + oMessageItem.code + ": " + oMessageItem.message + "</li>";
                            }
                            sDetails += "</ul>";
                            let sIconMessage;
                            let sTitle;
                            switch (sSeverity) {
                                case ValueState.Error:
                                    sIconMessage = MessageBox.Icon.ERROR;
                                    sTitle = goThat.i18n.getText("msError");
                                    break;
                                case ValueState.Warning:
                                    sIconMessage = MessageBox.Icon.WARNING;
                                    sTitle = goThat.i18n.getText("msWarning");
                                    break;
                                case ValueState.Information:
                                    sIconMessage = MessageBox.Icon.INFORMATION;
                                    sTitle = goThat.i18n.getText("msInformation");
                                    break;
                                case ValueState.Success:
                                    sIconMessage = MessageBox.Icon.SUCCESS;
                                    sTitle = goThat.i18n.getText("msSuccess");
                                    break;
                                default:
                                    break;
                            }
                            if (!bFound) {
                                let mMessage = {
                                    code: oMessage.code,
                                    message: oMessage.message,
                                    severity: oMessage.severity,
                                    target: oMessage.target
                                };
                                oMessage.details.push(mMessage);
                            }
                            MessageBox.show(oMessage.message, {
                                icon: sIconMessage,
                                styleClass: gbCompact ? "sapUiSizeCompact" : "",
                                actions: MessageBox.Action.OK,
                                title: sTitle,
                                details: sDetails
                            });
                            //fnPopover(oMessage.details);
                            if (mAprove.Aprobar) {
                                let oViewMain = goThat.getView().getParent().getParent();
                                let oView1 = oViewMain.getBeginColumnPages()[0];
                                let oTable1 = oView1.getContent()[0].getPages()[0].getContent().getItems()[0];
                                goThat._oTable1 = oTable1;
                                let oItems = oTable1.getBinding("items");
                                let oSelCobranza = goThat.getOwnerComponent().getSelCobranza();
                                let aFilters = [];
                                aFilters.push(new Filter("Sociedad", FilterOperator.EQ, oSelCobranza.Sociedad));
                                aFilters.push(new Filter("CodigoCliente", FilterOperator.EQ, oSelCobranza.CodigoCliente));
                                oItems.attachChange(fnAfterBinding);
                                oItems.filter(aFilters);
                            } else {
                                goThat.oRouter.navTo("master", {
                                    Layout: library.LayoutType.TwoColumnsMidExpanded
                                });
                            }
                        }
                    }
                };
                let fngetoError = function (oError, response) {
                    BusyIndicator.hide();
                    clearInterval(oSetInterval);

                    goThat._showErrorMessage(oError, gbCompact, goThat.i18n.getText("errorMessage1"));
                };
                let mParameters = {
                    method: "POST",
                    success: jQuery.proxy(fnsetoData, this),
                    error: jQuery.proxy(fngetoError, this)
                };
                oModel.create("/AprobacionNotaSet", mAprove, mParameters);
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent handleMessagePopoverPress
             */
            handleMessagePopoverPress: function (oEvent) {
                //This code was generated by the layout editor.
                goMessagePopover.toggle(oEvent.getSource());
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Detail
             * @param {object} oEvent handleClose
             */
            handleClose: function (oEvent) {
                //This code was generated by the layout editor.
                let oFlexibleColumnLayout = this.getView().getParent().getParent();
                oFlexibleColumnLayout.setLayout(library.LayoutType.OneColumn);
                goThat.oRouter.navTo("master", {
                    Layout: library.LayoutType.OneColumn
                });
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Main
             * @param {object} response object
             * @param {boolean} bCompact boolean
             * @param {string} sError string
             * @returns {boolean} bValidate
             */
            _validateResponse: function (response, bCompact, sError) {
                //This code was generated by the layout editor.
                let bValidate = true;
                if (response) {
                    if (response.headers["sap-message"]) {
                        let oMessage = JSON.parse(response.headers["sap-message"]);
                        let sSeverity = goThat._convertResponseSeverity(oMessage.severity);
                        if (sSeverity === ValueState.Error) {
                            MessageBox.show(oMessage.message, {
                                icon: MessageBox.Icon.ERROR,
                                styleClass: bCompact ? "sapUiSizeCompact" : "",
                                title: sError,
                                details: oMessage
                            });
                            bValidate = false;
                        }
                    }
                }
                return bValidate;
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Main
             * @param {string} sSeverity string
             * @returns {string} sValueState
             */
            _convertResponseSeverity: function (sSeverity) {
                let sValueState;
                switch (sSeverity) {
                    case "info":
                        sValueState = ValueState.Information;
                        break;
                    case "error":
                        sValueState = ValueState.Error;
                        break;
                    case "warning":
                        sValueState = ValueState.Warning;
                        break;
                    case "success":
                        sValueState = ValueState.Success;
                        break;
                    default:
                    }
                return sValueState;
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Main
             * @param {object} oError object
             * @param {boolean} bCompact boolean
             * @param {string} sError string
             */
            _showErrorMessage: function (oError, bCompact, sError) {
                if (oError.responseText) {
                    try {
                        var oMessage = JSON.parse(oError.responseText);
                    } catch (error) {
                        goThat._catchShowErrorMessage(oError, bCompact);
                        return;
                    }
                    MessageBox.show(oMessage.error.message.value, {
                        icon: MessageBox.Icon.ERROR,
                        styleClass: bCompact ? "sapUiSizeCompact" : "",
                        title: sError,
                        details: oMessage
                    });
                } else {
                    MessageBox.error(sError, {
                        styleClass: bCompact ? "sapUiSizeCompact" : ""
                    });
                }
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Main
             * @param {object} oError object
             * @param {boolean} bCompact boolean
             */
            _catchShowErrorMessage: function (oError, bCompact) {
                let parser = new DOMParser();
                let xmlDoc = parser.parseFromString(oError.responseText,"text/xml");
                let sMessage, sTitle;
                let oMessage = goThat._xmlToJson(xmlDoc);
                if (oMessage.html) {
                    if (oMessage.html.body.h1) {
                        sMessage = oMessage.html.body.h1["#text"];
                        sTitle   = oMessage.html.head.title["#text"];
                    } else if (oMessage.html.body.parsererror) {
                        sTitle   = oMessage.html.body.parsererror.h3[0]["#text"];
                        sMessage = oMessage.html.body.parsererror.h3[1]["#text"];
                    }

                } else if (oMessage.error) {
                    if (oMessage.error.innererror === undefined || oMessage.error.innererror === null) {
                        sTitle   = "Error";
                        sMessage = oMessage.error.message["#text"];
                    } else {
                        sMessage = oMessage.error.innererror.Error_Resolution.SAP_Transaction["#text"];
                        sTitle   = oMessage.error.message["#text"];
                    }
                }
                MessageBox.show(sMessage,
                {
                    icon: MessageBox.Icon.ERROR,
                    styleClass: bCompact ? "sapUiSizeCompact" : "",
                    title: sTitle,
                    details: oMessage
                });
            },

            /**
             *@memberOf zalcsa.aprobacionnotas.view.Main
             * @param {object} xml object
             * @returns {object} obj
             */
            _xmlToJson: function (xml) {
                let obj = {};
                if (xml.nodeType === 1) { // element
                    // do attributes
                    if (xml.attributes.length > 0) {
                    obj["@attributes"] = {};
                        for (let i = 0; i < xml.attributes.length; i++) {
                            let attribute = xml.attributes.item(i);
                            obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
                        }
                    }
                } else if (xml.nodeType === 3) { // text
                    obj = xml.nodeValue;
                }
                // do children
                if (xml.hasChildNodes()) {
                    for(let i = 0; i < xml.childNodes.length; i++) {
                        let item = xml.childNodes.item(i);
                        let nodeName = item.nodeName;
                        if (typeof(obj[nodeName]) === "undefined") {
                            obj[nodeName] = this._xmlToJson(item);
                        } else {
                            if (typeof(obj[nodeName].push) === "undefined") {
                                let old = obj[nodeName];
                                obj[nodeName] = [];
                                obj[nodeName].push(old);
                            }
                            obj[nodeName].push(this._xmlToJson(item));
                        }
                    }
                }
                return obj;
            }
        });
        return CController;
    }
);