sap.ui.define([
  "sap/ui/core/mvc/Controller",
  "sap/ui/model/Filter",
  "sap/ui/model/FilterOperator",
  'sap/m/MessageBox',
  "sap/ui/core/BusyIndicator",
  "sap/f/library",
  "zalcsa/aprobacionnotas/service/Solicitud"
],
/**
* @param {typeof sap.ui.core.mvc.Controller} Controller
*/
function (Controller, Filter, FilterOperator, MessageBox, BusyIndicator, library, servSol) {
"use strict";
let CController;
let goThat;
let giSearch;

CController = Controller.extend("zalcsa.aprobacionnotas.controller.Master", {
  /**
   * Called when a controller is instantiated and its View controls (if available) are already created.
   * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
   * @memberOf zalcsa.aprobacionnotas.view.Master
   */
  onInit: function () {
      //This code was generated by the layout editor.
      goThat = this;
      this.oRouter = this.getOwnerComponent().getRouter();
      this.i18n = this.getOwnerComponent().getModel("i18n").getResourceBundle();
      this.oRouter.getRoute("master").attachPatternMatched(this._onRouteMatched, this);

      // Validar Flujo
      //this.init();
      //servSol.init(this.oServiceModel)
  },

  /**
   * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
   * (NOT before the first rendering! onInit() is used for that one!).
   * @memberOf zalcsa.aprobacionnotas.view.Master
   */
  onAfterRendering: function () {
      //This code was generated by the layout editor.
      // this._onStartInitialDialog();
      this.localModel = this.getView().getModel("localModel");

      // Validar Flujo
      //this.localModelSrv = this.getOwnerComponent().getModel("ZSO_FI_NOTA_CREDITO_APROBAR_SRV")

  },

  /**
   * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
   * This hook is the same one that SAPUI5 controls get after being rendered.
   * @memberOf zalcsa.aprobacionnotas.view.Master
   */
  //  onAfterRendering: function() {
  //
  //  },

  /**
   * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
   * @memberOf zalcsa.aprobacionnotas.view.Master
   */
  //  onExit: function() {
  //
  //  }

  /**
   *@memberOf zalcsa.aprobacionnotas.view.Master
   * @param {object} oEvent _onRouteMatched
   */
  _onRouteMatched: function (oEvent) {
      //This code was generated by the layout editor.
  },

  /**
   *@memberOf zalcsa.aprobacionnotas.view.Master
   */
  _onStartInitialDialog: function () {
      //This code was generated by the layout editor.
      if (!goThat._ofrgInitial) {
          goThat._ofrgInitial = sap.ui.xmlfragment(
                  "idFragment1",
                  "zalcsa.aprobacionnotas" + ".view.dialog.InitialInput",
                  goThat);
          goThat.getView().addDependent(goThat._ofrgInitial);
      }
      goThat._ofrgInitial.open();
  },

  onHelpBukrs: function (oEvent) {
      let sInputValue = oEvent.getSource().getValue();
      if (!this._ofrgHelpBukrs) {
          this._ofrgHelpBukrs = sap.ui.xmlfragment(
                  "idFragment3",
                  "zalcsa.aprobacionnotas" + ".view.dialog.valueHelp_bukrs",
                  this);
          this.getView().addDependent(this._ofrgHelpBukrs);
      }
      this._ofrgHelpBukrs.open();
  },

  onHelpKunnr: function (oEvent) {
      let sInputValue = oEvent.getSource().getValue();
      if (!this._ofrgHelpKunnr) {
          this._ofrgHelpKunnr = sap.ui.xmlfragment(
                  "idFragment4",
                  "zalcsa.aprobacionnotas" + ".view.dialog.valueHelp_kunnr",
                  this);
          this.getView().addDependent(this._ofrgHelpKunnr);
      }
      this._ofrgHelpKunnr.open();
  },

  onHelpCloseBukrs: function (oEvent) {
      //This code was generated by the layout editor.
      let oSelectedItem = oEvent.getParameter("selectedItem");
      let oBinding = oEvent.getSource().getBinding("items");
      oBinding.filter([]);
      if (!oSelectedItem) {
          return;
      }
      let oInput = this.getView().byId("input-a");
      oInput.setValue(oSelectedItem.getTitle());
      oInput.setValueState(sap.ui.core.ValueState.None);
  },

  onHelpCloseKunnr: function (oEvent) {
      //This code was generated by the layout editor.
      let oSelectedItem = oEvent.getParameter("selectedItem");
      let oBinding = oEvent.getSource().getBinding("items");
      oBinding.filter([]);
      if (!oSelectedItem) {
          return;
      }
      let oInput = this.getView().byId("input-b");
      oInput.setValue(oSelectedItem.getTitle());
      oInput.setValueState(sap.ui.core.ValueState.None);
  },

  onHelpSearchBukrs: function (oEvent) {
      //This code was generated by the layout editor.
      let sValue = oEvent.getParameter("value");
      let aFilters = [];
      let oFilter = new Filter("CompanyCodeName", FilterOperator.Contains, sValue);
      aFilters.push(oFilter);
      oFilter = new Filter("CompanyCode", FilterOperator.Contains, sValue);
      aFilters.push(oFilter);
      let oBinding = oEvent.getSource().getBinding("items");
      oBinding.filter([new Filter(aFilters, false)]);
  },

  onHelpSearchKunnr: function (oEvent) {
      //This code was generated by the layout editor.
      let sValue = oEvent.getParameter("value");
      let aFilters = [];
      let oFilter = new Filter("CustomerName", FilterOperator.Contains, sValue);
      aFilters.push(oFilter);
      oFilter = new Filter("Customer", FilterOperator.Contains, sValue);
      aFilters.push(oFilter);
      let oBinding = oEvent.getSource().getBinding("items");
      oBinding.filter([new Filter(aFilters, false)]);
  },

  /**
   *@memberOf zalcsa.aprobacionnotas.view.Master
   * @param {object} oEvent onConfirm
   */
  onConfirm: async function (oEvent) {
      //This code was generated by the layout editor.
      let oElements = sap.ui.core.Fragment.byId("idFragment1", "idFormElement");
      let aFields = oElements.getFields();
      let aFilters = [];
      for (let i = 0; i < aFields.length; i++) {
          let oInput = aFields[i];
          let sFilter;
          switch (i) {
          case 0:
              sFilter = "Sociedad";
              break;
          case 1:
              sFilter = "CodigoCliente";
              break;
          default:
              break;
          }
          if (oInput.getValue()) {
              aFilters.push(new Filter(sFilter, FilterOperator.EQ, oInput.getValue()));
          }
      }
      if (aFilters.length === 0) {
          MessageBox.warning(this.i18n.getText("merrObligatorio"));
          return;
      }
      let oTable = this.getView().byId("idTable1");
      let oItems = oTable.getBinding("items");

      BusyIndicator.show(0);

      var iCont = 0;
      var oSetInterval;
      let fnSetInterval = function () {
          iCont++;
          if (iCont >= 10) {
              BusyIndicator.hide();
              clearInterval(oSetInterval);
              MessageBox.error(goThat.i18n.getText("merrNoServer"));
          }
      };
      oSetInterval = setInterval(fnSetInterval, 1000);

      let fnAfterBinding = function (oEvent1) {
          BusyIndicator.hide();
          clearInterval(oSetInterval);
          let iResults = oEvent1.getSource().getLength();
          if (iResults <= 0) {
              oTable.setHeaderText(goThat.i18n.getText("lblSeleccionCobranza") + "(0)");
              //MessageBox.warning(goThat.i18n.getText("merrSinRegistros"));
          } else {
              oTable.setHeaderText(goThat.i18n.getText("lblSeleccionCobranza") + " (" + iResults + ")");
              goThat._ofrgInitial.close();
          }
      };
      oItems.attachChange(fnAfterBinding);

      oItems.filter(aFilters);
  },

  onSearchButton: function (oEvent) {
      let oFilters = this.localModel.getProperty("/oFilters");
      let aFilters = [];
      if (!oFilters.Sociedad || !oFilters.CodCliente) {
          MessageBox.warning(this.i18n.getText("merrObligatorio"));
          return;
      }
      giSearch++;
      if (giSearch > 1) {
          return;
      }
      oFilters.Sociedad ? aFilters.push(new Filter("Sociedad", FilterOperator.EQ, oFilters.Sociedad)) : null;
      oFilters.CodCliente ? aFilters.push(new Filter("CodigoCliente", FilterOperator.EQ, oFilters.CodCliente)) : null;
      oFilters.filTabla ? aFilters.push(new Filter("Documento", FilterOperator.Contains, oFilters.filTabla)) : null;

      let oTable = this.getView().byId("idTable1");
      let oItems = oTable.getBinding("items");

      BusyIndicator.show(0);

      var iCont = 0;
      var oSetInterval;
      let fnSetInterval = function () {
          iCont++;
          if (iCont >= 10) {
              giSearch = 0;
              BusyIndicator.hide();
              clearInterval(oSetInterval);
              MessageBox.error(goThat.i18n.getText("merrNoServer"));
          }
      };
      oSetInterval = setInterval(fnSetInterval, 1000);
      let iSearch = 0;
      let fnAfterBinding = function (oEvent1) {
          BusyIndicator.hide();
          clearInterval(oSetInterval);
          giSearch = 0;
          let iResults = oEvent1.getSource().getLength();
          if (iResults <= 0) {
              iSearch++;
              oTable.setHeaderText(goThat.i18n.getText("lblSeleccionCobranza") + "(0)");
              if (iSearch > 1) {
                  return;
              }
              //MessageBox.warning(goThat.i18n.getText("merrSinRegistros"));
          } else {
              oTable.setHeaderText(goThat.i18n.getText("lblSeleccionCobranza") + " (" + iResults + ")");
              // goThat._ofrgInitial.close();
          }
      };
      oItems.attachChange(fnAfterBinding);

      oItems.filter(aFilters);
  },

  onBuscarCategory: function (oEvent) {},

  /**
   *@memberOf zalcsa.aprobacionnotas.view.Master
   * @param {object} oEvent _onRouteMatched
   */
  onListItemPress: async function (oEvent) {
      //This code was generated by the layout editor.
      // let oLineaSeleccionada = oEvent.getSource().getSelectedItem().getBindingContext().getObject();
      let oLineaSeleccionada = oEvent.getSource().getBindingContext().getObject();
      if (!oLineaSeleccionada.Documento || !oLineaSeleccionada.Sociedad) {
          return;
      }
      this.getOwnerComponent().setSelCobranza(oLineaSeleccionada);
      this.oRouter.navTo("detail", {
          Layout: library.LayoutType.TwoColumnsMidExpanded,
          Documento: oLineaSeleccionada.Documento,
          Sociedad: oLineaSeleccionada.Sociedad
      });
  }

});
return CController;
});
